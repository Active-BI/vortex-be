generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
}

model Rls {
  id        String @id @default(uuid()) @db.Uuid
  name      String
  User_Auth User[]
}

model Tenant {
  id               String             @id @default(uuid()) @db.Uuid
  tenant_name      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Client           Client[]
  User             User[]
  // RH_data     Rh_data[]
  Tenant_DashBoard Tenant_DashBoard[]
}

model User_Auth {
  id                        String    @id @default(uuid()) @db.Uuid
  secret                    String?
  reset_pass                String?
  password_hash             String?
  normalized_personal_email String
  last_access               DateTime? @db.Timestamptz()
  user_id                   String    @db.Uuid
  User                      User      @relation(fields: [user_id], references: [id])
}

model User {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  born_date             DateTime                @db.Date
  personal_email        String
  contact_email         String
  profession            String
  description           String
  tenant_id             String                  @db.Uuid
  Tenant                Tenant                  @relation(fields: [tenant_id], references: [id])
  rls_id                String                  @db.Uuid
  Rls                   Rls                     @relation(fields: [rls_id], references: [id])
  User_Auth             User_Auth[]
  User_Tenant_DashBoard User_Tenant_DashBoard[]
}

model Client {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  social_name   String
  cnpj          String
  contact_email String
  Telefone      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant_id     String   @db.Uuid
  Tenant        Tenant   @relation(fields: [tenant_id], references: [id])
}

model DashBoard {
  report_id        String             @id @default(uuid()) @db.Uuid
  name             String
  type             String
  group_id         String
  Tenant_DashBoard Tenant_DashBoard[]
}

model Tenant_DashBoard {
  id                    String                  @id @default(uuid()) @db.Uuid
  tenant_id             String                  @db.Uuid
  Tenant                Tenant                  @relation(fields: [tenant_id], references: [id])
  dashboard_id          String                  @db.Uuid
  Dashboard             DashBoard               @relation(fields: [dashboard_id], references: [report_id])
  user_Tenant_DashBoard User_Tenant_DashBoard[]
}

model User_Tenant_DashBoard {
  id                  String           @id @default(uuid()) @db.Uuid
  tenant_DashBoard_id String           @db.Uuid
  Tenant_DashBoard    Tenant_DashBoard @relation(fields: [tenant_DashBoard_id], references: [id])
  user_id             String           @db.Uuid
  User                User             @relation(fields: [user_id], references: [id])
}
