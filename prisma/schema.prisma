generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
}

model Rls {
  id        String      @id @default(uuid())
  name      String
  User_Auth User[]
  Page_Role Page_Role[]
}

model Tenant {
  id                   String                 @id @default(uuid())
  tenant_name          String
  tenant_cnpj          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  active               Boolean
  User                 User[]
  restrict             Boolean?               @default(false)
  funionarios_table    funcionarios_table[]
  Request_admin_access Request_admin_access[]
  Tenant_Page          Tenant_Page[]
}

model Request_admin_access {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  company_description String
  company_name        String
  company_cnpj        String
  email               String
  name                String
  tenant_id           String?
  Tenant              Tenant?  @relation(fields: [tenant_id], references: [id])
  blocked             Boolean  @default(false)
  accept              Boolean  @default(false)
}

model User_Auth {
  id                       String    @id @default(uuid())
  secret                   String?
  reset_pass               String?
  password_hash            String?
  anchor                   Boolean
  normalized_contact_email String?
  last_access              DateTime?
  user_id                  String    @unique
  User                     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(uuid())
  name           String
  born_date      DateTime?   @db.Date
  personal_email String?     @unique
  contact_email  String
  description    String
  tenant_id      String?
  Tenant         Tenant?     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  rls_id         String
  Rls            Rls         @relation(fields: [rls_id], references: [id], onDelete: Cascade)
  User_Auth      User_Auth?
  User_Page      User_Page[]
}

model Tenant_Page {
  id        String      @id @default(uuid())
  tenant_id String
  Tenant    Tenant      @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  page_id   String
  Page      Page        @relation(fields: [page_id], references: [id], onDelete: Cascade)
  User_Page User_Page[]
}

model User_Page {
  id             String      @id @default(uuid())
  tenant_page_id String
  Tenant_Page    Tenant_Page @relation(fields: [tenant_page_id], references: [id], onDelete: Cascade)
  user_id        String
  User           User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Page_Role {
  id      String @id @default(uuid())
  page_id String
  Page    Page   @relation(fields: [page_id], references: [id], onDelete: Cascade)
  rls_id  String
  Rls     Rls    @relation(fields: [rls_id], references: [id])
}

model Page_Group {
  id             String   @id @default(uuid())
  title          String
  formated_title String?
  restrict       Boolean? @default(false)
  icon           String
  Page           Page[]
}

model Page {
  id                     String        @id @default(uuid())
  type                   String
  report_type            String?
  formated_title         String?
  title                  String
  descricao_painel       String?
  responsavel            String?
  link                   String?
  group_id               String?
  report_id              String?
  possui_dados_sensiveis Boolean?      @default(false)
  restrict               Boolean?      @default(false)
  table_name             String?
  Page_Role              Page_Role[]
  page_group_id          String
  Page_Group             Page_Group    @relation(fields: [page_group_id], references: [id], onDelete: Cascade)
  Tenant_Page            Tenant_Page[]
}

model funcionarios_table {
  id                  String    @id @default(uuid())
  nomeEmpresa         String
  matricula           String
  nome                String
  cargos              String
  dataAdmissao        DateTime
  area                String
  salario             Float
  sexo                String
  cutis               String
  dataNascimento      DateTime
  email               String
  vinculoEmpregaticio String
  situacaoEmpregado   String
  grauInstrucao       String
  pcd                 String
  desligado           String
  dataDesligamento    DateTime?
  motivoDesligamento  String?
  timestamp           DateTime  @default(now())
  tenant_id           String
  Tenant              Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}
