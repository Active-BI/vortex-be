generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
}

model Rls {
  id        String @id @default(uuid()) @db.Uuid
  name      String
  User_Auth User[]
}

model Tenant {
  id                   String                  @id @default(uuid()) @db.Uuid
  tenant_name          String
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  active               Boolean
  User                 User[]
  Tenant_DashBoard     Tenant_DashBoard[]
  funionarios_table    rh_funcionarios_table[]
  Request_admin_access Request_admin_access[]
}

model Request_admin_access {
  id                  String   @id @default(uuid()) @db.Uuid
  createdAt           DateTime @default(now())
  company_description String
  company_name        String
  company_cnpj        String
  email               String
  name                String
  tenant_id           String?  @db.Uuid
  Tenant              Tenant?  @relation(fields: [tenant_id], references: [id])
  description         String
  profession          String
  blocked             Boolean  @default(false)
  accept              Boolean  @default(false)
}

model User_Auth {
  id                       String    @id @default(uuid()) @db.Uuid
  secret                   String?
  reset_pass               String?
  password_hash            String?
  anchor                   Boolean
  normalized_contact_email String?
  last_access              DateTime? @db.Timestamptz()
  user_id                  String    @unique @db.Uuid
  User                     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  born_date             DateTime?               @db.Date
  personal_email        String?                 @unique
  contact_email         String
  profession            String
  description           String
  tenant_id             String?                 @db.Uuid
  Tenant                Tenant?                 @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  rls_id                String                  @db.Uuid
  Rls                   Rls                     @relation(fields: [rls_id], references: [id], onDelete: Cascade)
  User_Tenant_DashBoard User_Tenant_DashBoard[]
  User_Auth             User_Auth?
}

model DashBoard {
  report_id        String             @id @default(uuid()) @db.Uuid
  name             String
  type             String
  group_id         String
  Tenant_DashBoard Tenant_DashBoard[]
}

model Tenant_DashBoard {
  id                    String                  @id @default(uuid()) @db.Uuid
  tenant_id             String                  @db.Uuid
  Tenant                Tenant                  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  dashboard_id          String                  @db.Uuid
  Dashboard             DashBoard               @relation(fields: [dashboard_id], references: [report_id])
  user_Tenant_DashBoard User_Tenant_DashBoard[]
}

model User_Tenant_DashBoard {
  id                  String           @id @default(uuid()) @db.Uuid
  tenant_DashBoard_id String           @db.Uuid
  Tenant_DashBoard    Tenant_DashBoard @relation(fields: [tenant_DashBoard_id], references: [id], onDelete: Cascade)
  user_id             String           @db.Uuid
  User                User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model rh_funcionarios_table {
  id                  String    @id @default(uuid()) @db.Uuid
  nomeEmpresa         String
  matricula           String
  nome                String
  cargos              String
  dataAdmissao        DateTime
  area                String
  salario             Float
  sexo                String
  cutis               String
  dataNascimento      DateTime
  email               String
  vinculoEmpregaticio String
  situacaoEmpregado   String
  grauInstrucao       String
  pcd                 Boolean
  desligado           Boolean
  dataDesligamento    DateTime?
  motivoDesligamento  String?
  timestamp           DateTime  @default(now())
  tenant_id           String    @db.Uuid
  Tenant              Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}
