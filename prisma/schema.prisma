generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
}

model Rls {
  id        String      @id @default(uuid())
  name      String
  User_Auth User[]
  Page_Role Page_Role[]
}

model Tenant {
  id                   String                 @id @default(uuid())
  tenant_name          String
  tenant_cnpj          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  active               Boolean
  company_uf           String?
  company_size         String?
  tenant_color         String?
  tenant_image         String?
  company_description String?
  company_segment      String?
  User                 User[]
  restrict             Boolean?               @default(false)
  Tenant_Page          Tenant_Page[]
  Office               Office[]
  User_Session_Hist    User_Session_Hist[]
  Tenant_files Tenant_files[]
}
model app {
  id String @unique @id @default(uuid())
  logo String
  bg_image String
  bg_color String
}

model User_Auth {
  id                       String    @id @default(uuid())
  secret                   String?
  reset_pass               String?
  password_hash            String?
  anchor                   Boolean
  normalized_contact_email String?
  last_access              DateTime?
  user_id                  String    @unique
  User                     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User_Session_Hist {
  id             String      @id @default(uuid())
  email        String
  tenant_id String
  created_at DateTime @default(now())
  exited_at DateTime?
  updated_at DateTime? @updatedAt
  User User @relation(fields: [email], references: [contact_email],  onDelete: Cascade)
  Tenant Tenant @relation(fields: [tenant_id], references: [id])
}

model User {
  id             String      @id @default(uuid())
  name           String
  born_date      DateTime?   @db.Date
  personal_email String?     @unique
  contact_email  String     @unique
  tenant_id      String?
  Tenant         Tenant?     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  rls_id         String
  Rls            Rls         @relation(fields: [rls_id], references: [id], onDelete: Cascade)
  User_Auth      User_Auth?
  projects        String[]
  User_Page      User_Page[]
  User_Session_Hist User_Session_Hist[]
  office_id       String?
  Office            Office?         @relation(fields: [office_id], references: [id])
}

model Tenant_Page {
  id        String      @id @default(uuid())
  tenant_id String
  Tenant    Tenant      @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  page_id   String
  Page      Page        @relation(fields: [page_id], references: [id], onDelete: Cascade)
  User_Page User_Page[]
}

model UserInOut {
  id     String   @id @default(uuid()) @db.Uuid
  status String
  email  String
  data   DateTime @db.Timestamptz(3)
}

model User_Page {
  id             String      @id @default(uuid())
  tenant_page_id String
  Tenant_Page    Tenant_Page @relation(fields: [tenant_page_id], references: [id], onDelete: Cascade)
  user_id        String
  User           User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Page_Role {
  id      String @id @default(uuid())
  page_id String
  Page    Page   @relation(fields: [page_id], references: [id], onDelete: Cascade)
  rls_id  String
  Rls     Rls    @relation(fields: [rls_id], references: [id])
}

model Page_Group {
  id             String   @id @default(uuid())
  title          String
  formated_title String?
  restrict       Boolean? @default(false)
  icon           String
  Page           Page[]
}

model Office {
  id  String  @id @default(uuid())
  name String
  tenant_id String
  Tenant    Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  User                User[]
}


model Page {
  id                     String        @id @default(uuid())
  type                   String
  page_type            String?
  formated_title         String?
  title                  String
  descricao_painel       String?
  nome_responsavel        String?
  email_responsavel       String?
  link                   String?
  group_id               String?
  report_id              String?
  possui_dados_sensiveis Boolean?      @default(false)
  restrict               Boolean?      @default(false)
  table_name             String?
  Page_Role              Page_Role[]
  page_group_id          String
  Page_Group             Page_Group    @relation(fields: [page_group_id], references: [id], onDelete: Cascade)
  Tenant_Page            Tenant_Page[]
}

model projeto_cliente {
  id  String @id @default(uuid())
  cliente String?
  projeto String?
}
model Tenant_files {
  id             String    @id() @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_by     String?   @db.VarChar(255)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  deleted_date   DateTime? @db.Timestamp(6)
  name           String    @db.VarChar(255)
  file           Bytes
  file_format    String    @db.VarChar
  projects        String[]
  tenant_id          String
  Tenant Tenant @relation(fields: [tenant_id],references: [id])
}
model funcionarios_table {
  id                  String    @id @default(uuid())
  nomeEmpresa         String
  matricula           String
  nome                String
  cargos              String
  dataAdmissao        DateTime
  area                String
  salario             Float
  sexo                String
  cutis               String
  dataNascimento      DateTime
  email               String
  vinculoEmpregaticio String
  situacaoEmpregado   String
  grauInstrucao       String
  pcd                 String
  desligado           String
  dataDesligamento    DateTime?
  motivoDesligamento  String?
  timestamp           DateTime  @default(now())
  tenant_id           String
}
