generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
}

model Rls {
  id        String      @id @default(uuid()) @db.Uuid
  name      String
  User_Auth User[]
  Page_Role Page_Role[]
}

model Tenant {
  id                   String                  @id @default(uuid()) @db.Uuid
  tenant_name          String
  tenant_cnpj          String
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  active               Boolean
  User                 User[]
  restrict             Boolean?                @default(false)
  funionarios_table    rh_funcionarios_table[]
  Request_admin_access Request_admin_access[]
  Tenant_Page          Tenant_Page[]
}

model Request_admin_access {
  id                  String   @id @default(uuid()) @db.Uuid
  createdAt           DateTime @default(now())
  company_description String
  company_name        String
  company_cnpj        String
  email               String
  name                String
  tenant_id           String?  @db.Uuid
  Tenant              Tenant?  @relation(fields: [tenant_id], references: [id])
  description         String
  profession          String
  blocked             Boolean  @default(false)
  accept              Boolean  @default(false)
}

model User_Auth {
  id                       String    @id @default(uuid()) @db.Uuid
  secret                   String?
  reset_pass               String?
  password_hash            String?
  anchor                   Boolean
  normalized_contact_email String?
  last_access              DateTime? @db.Timestamptz()
  user_id                  String    @unique @db.Uuid
  User                     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(uuid()) @db.Uuid
  name           String
  born_date      DateTime?   @db.Date
  personal_email String?     @unique
  contact_email  String
  profession     String
  description    String
  tenant_id      String?     @db.Uuid
  Tenant         Tenant?     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  rls_id         String      @db.Uuid
  Rls            Rls         @relation(fields: [rls_id], references: [id], onDelete: Cascade)
  User_Auth      User_Auth?
  User_Page      User_Page[]
}

model Tenant_Page {
  id        String      @id @default(uuid()) @db.Uuid
  tenant_id String      @db.Uuid
  Tenant    Tenant      @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  page_id   String      @db.Uuid
  Page      Page        @relation(fields: [page_id], references: [id])
  User_Page User_Page[]
}

model User_Page {
  id             String      @id @default(uuid()) @db.Uuid
  tenant_page_id String      @db.Uuid
  Tenant_Page    Tenant_Page @relation(fields: [tenant_page_id], references: [id], onDelete: Cascade)
  user_id        String      @db.Uuid
  User           User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Page_Role {
  id      String @id @default(uuid()) @db.Uuid
  page_id String @db.Uuid
  Page    Page   @relation(fields: [page_id], references: [id])
  rls_id  String @db.Uuid
  Rls     Rls    @relation(fields: [rls_id], references: [id])
}

model Page_Group {
  id    String @id @default(uuid()) @db.Uuid
  title String
  icon  String
  Page  Page[]
}

model Page {
  id            String        @id @default(uuid()) @db.Uuid
  type          String
  title         String
  link          String?
  group_id      String?
  report_id     String?
  restrict      Boolean?      @default(false)
  table_name    String?
  Page_Role     Page_Role[]
  page_group_id String?       @db.Uuid
  Page_Group    Page_Group?   @relation(fields: [page_group_id], references: [id])
  Tenant_Page   Tenant_Page[]
}

model rh_funcionarios_table {
  id                  String    @id @default(uuid()) @db.Uuid
  nomeEmpresa         String
  matricula           String
  nome                String
  cargos              String
  dataAdmissao        DateTime
  area                String
  salario             Float
  sexo                String
  cutis               String
  dataNascimento      DateTime
  email               String
  vinculoEmpregaticio String
  situacaoEmpregado   String
  grauInstrucao       String
  pcd                 Boolean
  desligado           Boolean
  dataDesligamento    DateTime?
  motivoDesligamento  String?
  timestamp           DateTime  @default(now())
  tenant_id           String    @db.Uuid
  Tenant              Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}
